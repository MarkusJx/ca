/**
 * Generated by orval v6.12.1 üç∫
 * Do not edit manually.
 * Certificate Authority API
 * A simple API for managing certificates
 * OpenAPI spec version: 0.0.1
 */
import { createQuery, createMutation } from '@tanstack/svelte-query';
import type {
  CreateQueryOptions,
  CreateMutationOptions,
  QueryFunction,
  MutationFunction,
  CreateQueryResult,
  QueryKey,
} from '@tanstack/svelte-query';
import type {
  UserDto,
  ErrorDto,
  CreateUserDto,
  ListParams,
  _DeleteParams,
  ByNameParams,
  GetParams,
} from '.././models';
import { customInstance } from '.././axios';
import type { ErrorType } from '.././axios';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const create = (
  createUserDto: CreateUserDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<UserDto>(
    {
      url: `/api/v1/user`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: createUserDto,
    },
    options
  );
};

export type CreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof create>>
>;
export type CreateMutationBody = CreateUserDto;
export type CreateMutationError = ErrorType<ErrorDto>;

export const createCreate = <
  TError = ErrorType<ErrorDto>,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof create>>,
    TError,
    { data: CreateUserDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof create>>,
    { data: CreateUserDto }
  > = (props) => {
    const { data } = props ?? {};

    return create(data, requestOptions);
  };

  return createMutation<
    Awaited<ReturnType<typeof create>>,
    TError,
    { data: CreateUserDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const list = (
  params?: ListParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<UserDto[]>(
    { url: `/api/v1/user/list`, method: 'get', params, signal },
    options
  );
};

export const getListQueryKey = (params?: ListParams) => [
  `/api/v1/user/list`,
  ...(params ? [params] : []),
];

export type ListQueryResult = NonNullable<Awaited<ReturnType<typeof list>>>;
export type ListQueryError = ErrorType<ErrorDto>;

export const createList = <
  TData = Awaited<ReturnType<typeof list>>,
  TError = ErrorType<ErrorDto>
>(
  params?: ListParams,
  options?: {
    query?: CreateQueryOptions<Awaited<ReturnType<typeof list>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  }
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof list>>> = ({
    signal,
  }) => list(params, requestOptions, signal);

  const query = createQuery<Awaited<ReturnType<typeof list>>, TError, TData>({
    queryKey,
    queryFn,
    ...queryOptions,
  }) as CreateQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const _delete = (
  id: string,
  params?: _DeleteParams,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/api/v1/user/${id}`, method: 'delete', params },
    options
  );
};

export type _DeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof _delete>>
>;

export type _DeleteMutationError = ErrorType<ErrorDto>;

export const createDelete = <
  TError = ErrorType<ErrorDto>,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof _delete>>,
    TError,
    { id: string; params?: _DeleteParams },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof _delete>>,
    { id: string; params?: _DeleteParams }
  > = (props) => {
    const { id, params } = props ?? {};

    return _delete(id, params, requestOptions);
  };

  return createMutation<
    Awaited<ReturnType<typeof _delete>>,
    TError,
    { id: string; params?: _DeleteParams },
    TContext
  >(mutationFn, mutationOptions);
};
export const byName = (
  name: string,
  params?: ByNameParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<UserDto>(
    { url: `/api/v1/user/by-name/${name}`, method: 'get', params, signal },
    options
  );
};

export const getByNameQueryKey = (name: string, params?: ByNameParams) => [
  `/api/v1/user/by-name/${name}`,
  ...(params ? [params] : []),
];

export type ByNameQueryResult = NonNullable<Awaited<ReturnType<typeof byName>>>;
export type ByNameQueryError = ErrorType<ErrorDto>;

export const createByName = <
  TData = Awaited<ReturnType<typeof byName>>,
  TError = ErrorType<ErrorDto>
>(
  name: string,
  params?: ByNameParams,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof byName>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getByNameQueryKey(name, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof byName>>> = ({
    signal,
  }) => byName(name, params, requestOptions, signal);

  const query = createQuery<Awaited<ReturnType<typeof byName>>, TError, TData>({
    queryKey,
    queryFn,
    enabled: !!name,
    ...queryOptions,
  }) as CreateQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const get = (
  id: string,
  params?: GetParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<UserDto>(
    { url: `/api/v1/user/${id}`, method: 'get', params, signal },
    options
  );
};

export const getGetQueryKey = (id: string, params?: GetParams) => [
  `/api/v1/user/${id}`,
  ...(params ? [params] : []),
];

export type GetQueryResult = NonNullable<Awaited<ReturnType<typeof get>>>;
export type GetQueryError = ErrorType<ErrorDto>;

export const createGet = <
  TData = Awaited<ReturnType<typeof get>>,
  TError = ErrorType<ErrorDto>
>(
  id: string,
  params?: GetParams,
  options?: {
    query?: CreateQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  }
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof get>>> = ({
    signal,
  }) => get(id, params, requestOptions, signal);

  const query = createQuery<Awaited<ReturnType<typeof get>>, TError, TData>({
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  }) as CreateQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};
