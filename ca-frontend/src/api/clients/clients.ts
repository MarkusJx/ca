/**
 * Generated by orval v6.12.1 üç∫
 * Do not edit manually.
 * Certificate Authority API
 * A simple API for managing certificates
 * OpenAPI spec version: 0.0.1
 */
import { createQuery, createMutation } from '@tanstack/svelte-query';
import type {
  CreateQueryOptions,
  CreateMutationOptions,
  QueryFunction,
  MutationFunction,
  CreateQueryResult,
  QueryKey,
} from '@tanstack/svelte-query';
import type {
  ClientDto,
  ErrorDto,
  CreateClientDto,
  ByIdParams,
} from '.././models';
import { customInstance } from '.././axios';
import type { ErrorType } from '.././axios';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const regenerateToken = (
  id: string,
  createClientDto: CreateClientDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<ClientDto>(
    {
      url: `/api/v1/client/regenerate/${id}`,
      method: 'put',
      headers: { 'Content-Type': 'application/json' },
      data: createClientDto,
    },
    options
  );
};

export type RegenerateTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof regenerateToken>>
>;
export type RegenerateTokenMutationBody = CreateClientDto;
export type RegenerateTokenMutationError = ErrorType<ErrorDto>;

export const createRegenerateToken = <
  TError = ErrorType<ErrorDto>,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof regenerateToken>>,
    TError,
    { id: string; data: CreateClientDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof regenerateToken>>,
    { id: string; data: CreateClientDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return regenerateToken(id, data, requestOptions);
  };

  return createMutation<
    Awaited<ReturnType<typeof regenerateToken>>,
    TError,
    { id: string; data: CreateClientDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const byId = (
  id: string,
  params?: ByIdParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<ClientDto>(
    { url: `/api/v1/client/${id}`, method: 'get', params, signal },
    options
  );
};

export const getByIdQueryKey = (id: string, params?: ByIdParams) => [
  `/api/v1/client/${id}`,
  ...(params ? [params] : []),
];

export type ByIdQueryResult = NonNullable<Awaited<ReturnType<typeof byId>>>;
export type ByIdQueryError = ErrorType<ErrorDto>;

export const createById = <
  TData = Awaited<ReturnType<typeof byId>>,
  TError = ErrorType<ErrorDto>
>(
  id: string,
  params?: ByIdParams,
  options?: {
    query?: CreateQueryOptions<Awaited<ReturnType<typeof byId>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  }
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getByIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof byId>>> = ({
    signal,
  }) => byId(id, params, requestOptions, signal);

  const query = createQuery<Awaited<ReturnType<typeof byId>>, TError, TData>({
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  }) as CreateQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};
