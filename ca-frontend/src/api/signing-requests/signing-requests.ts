/**
 * Generated by orval v6.12.1 üç∫
 * Do not edit manually.
 * Certificate Authority API
 * A simple API for managing certificates
 * OpenAPI spec version: 0.0.1
 */
import { createQuery } from '@tanstack/svelte-query';
import type {
  CreateQueryOptions,
  QueryFunction,
  CreateQueryResult,
  QueryKey,
} from '@tanstack/svelte-query';
import type { SigningRequestDto, ErrorDto } from '.././models';
import { customInstance } from '.././axios';
import type { ErrorType } from '.././axios';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const getAll = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<SigningRequestDto[]>(
    { url: `/api/v1/signing-request`, method: 'get', signal },
    options
  );
};

export const getGetAllQueryKey = () => [`/api/v1/signing-request`];

export type GetAllQueryResult = NonNullable<Awaited<ReturnType<typeof getAll>>>;
export type GetAllQueryError = ErrorType<ErrorDto>;

export const createGetAll = <
  TData = Awaited<ReturnType<typeof getAll>>,
  TError = ErrorType<ErrorDto>
>(options?: {
  query?: CreateQueryOptions<Awaited<ReturnType<typeof getAll>>, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAll>>> = ({
    signal,
  }) => getAll(requestOptions, signal);

  const query = createQuery<Awaited<ReturnType<typeof getAll>>, TError, TData>({
    queryKey,
    queryFn,
    ...queryOptions,
  }) as CreateQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const byClientId = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<SigningRequestDto[]>(
    { url: `/api/v1/signing-request/${id}`, method: 'get', signal },
    options
  );
};

export const getByClientIdQueryKey = (id: string) => [
  `/api/v1/signing-request/${id}`,
];

export type ByClientIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof byClientId>>
>;
export type ByClientIdQueryError = ErrorType<ErrorDto>;

export const createByClientId = <
  TData = Awaited<ReturnType<typeof byClientId>>,
  TError = ErrorType<ErrorDto>
>(
  id: string,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof byClientId>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getByClientIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof byClientId>>> = ({
    signal,
  }) => byClientId(id, requestOptions, signal);

  const query = createQuery<
    Awaited<ReturnType<typeof byClientId>>,
    TError,
    TData
  >({ queryKey, queryFn, enabled: !!id, ...queryOptions }) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};
