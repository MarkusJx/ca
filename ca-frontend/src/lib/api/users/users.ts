/**
 * Generated by orval v6.12.1 üç∫
 * Do not edit manually.
 * Certificate Authority API
 * A simple API for managing certificates
 * OpenAPI spec version: 0.0.1
 */
import { createQuery, createMutation } from '@tanstack/svelte-query';
import type {
  CreateQueryOptions,
  CreateMutationOptions,
  QueryFunction,
  MutationFunction,
  CreateQueryResult,
  QueryKey,
} from '@tanstack/svelte-query';
import type {
  UserDto,
  ErrorDto,
  CreateUserDto,
  GetUserByNameParams,
  ListUsersParams,
  GetUserByIdParams,
  DeleteUserParams,
} from '../models';
import { customInstance } from '../axios';
import type { ErrorType } from '../axios';

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const createUser = (
  createUserDto: CreateUserDto,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<UserDto>(
    {
      url: `/api/v1/user`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: createUserDto,
    },
    options
  );
};

export type CreateUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof createUser>>
>;
export type CreateUserMutationBody = CreateUserDto;
export type CreateUserMutationError = ErrorType<ErrorDto>;

export const createCreateUser = <
  TError = ErrorType<ErrorDto>,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof createUser>>,
    TError,
    { data: CreateUserDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createUser>>,
    { data: CreateUserDto }
  > = (props) => {
    const { data } = props ?? {};

    return createUser(data, requestOptions);
  };

  return createMutation<
    Awaited<ReturnType<typeof createUser>>,
    TError,
    { data: CreateUserDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const getUserByName = (
  name: string,
  params?: GetUserByNameParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<UserDto>(
    { url: `/api/v1/user/by-name/${name}`, method: 'get', params, signal },
    options
  );
};

export const getGetUserByNameQueryKey = (
  name: string,
  params?: GetUserByNameParams
) => [`/api/v1/user/by-name/${name}`, ...(params ? [params] : [])];

export type GetUserByNameQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserByName>>
>;
export type GetUserByNameQueryError = ErrorType<ErrorDto>;

export const createGetUserByName = <
  TData = Awaited<ReturnType<typeof getUserByName>>,
  TError = ErrorType<ErrorDto>
>(
  name: string,
  params?: GetUserByNameParams,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof getUserByName>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetUserByNameQueryKey(name, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserByName>>> = ({
    signal,
  }) => getUserByName(name, params, requestOptions, signal);

  const query = createQuery<
    Awaited<ReturnType<typeof getUserByName>>,
    TError,
    TData
  >({
    queryKey,
    queryFn,
    enabled: !!name,
    ...queryOptions,
  }) as CreateQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const listUsers = (
  params?: ListUsersParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<UserDto[]>(
    { url: `/api/v1/user/list`, method: 'get', params, signal },
    options
  );
};

export const getListUsersQueryKey = (params?: ListUsersParams) => [
  `/api/v1/user/list`,
  ...(params ? [params] : []),
];

export type ListUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof listUsers>>
>;
export type ListUsersQueryError = ErrorType<ErrorDto>;

export const createListUsers = <
  TData = Awaited<ReturnType<typeof listUsers>>,
  TError = ErrorType<ErrorDto>
>(
  params?: ListUsersParams,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof listUsers>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListUsersQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listUsers>>> = ({
    signal,
  }) => listUsers(params, requestOptions, signal);

  const query = createQuery<
    Awaited<ReturnType<typeof listUsers>>,
    TError,
    TData
  >({ queryKey, queryFn, ...queryOptions }) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const getUserById = (
  id: string,
  params?: GetUserByIdParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<UserDto>(
    { url: `/api/v1/user/${id}`, method: 'get', params, signal },
    options
  );
};

export const getGetUserByIdQueryKey = (
  id: string,
  params?: GetUserByIdParams
) => [`/api/v1/user/${id}`, ...(params ? [params] : [])];

export type GetUserByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserById>>
>;
export type GetUserByIdQueryError = ErrorType<ErrorDto>;

export const createGetUserById = <
  TData = Awaited<ReturnType<typeof getUserById>>,
  TError = ErrorType<ErrorDto>
>(
  id: string,
  params?: GetUserByIdParams,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof getUserById>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserByIdQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserById>>> = ({
    signal,
  }) => getUserById(id, params, requestOptions, signal);

  const query = createQuery<
    Awaited<ReturnType<typeof getUserById>>,
    TError,
    TData
  >({ queryKey, queryFn, enabled: !!id, ...queryOptions }) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const deleteUser = (
  id: string,
  params?: DeleteUserParams,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    { url: `/api/v1/user/${id}`, method: 'delete', params },
    options
  );
};

export type DeleteUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteUser>>
>;

export type DeleteUserMutationError = ErrorType<ErrorDto>;

export const createDeleteUser = <
  TError = ErrorType<ErrorDto>,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof deleteUser>>,
    TError,
    { id: string; params?: DeleteUserParams },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteUser>>,
    { id: string; params?: DeleteUserParams }
  > = (props) => {
    const { id, params } = props ?? {};

    return deleteUser(id, params, requestOptions);
  };

  return createMutation<
    Awaited<ReturnType<typeof deleteUser>>,
    TError,
    { id: string; params?: DeleteUserParams },
    TContext
  >(mutationFn, mutationOptions);
};
